# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

permissions:
  contents: read
  security-events: write
  actions: read

on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: '33 2 * * *'

env:
  GOLANGCI_LINT_VERSION: 'v2.0.2'

jobs:
  detect-modules:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: stable
          cache-dependency-path: '**/go.sum'
      - id: set-modules
        run: echo modules=$(echo $(go list -C client/dumper -m -json; go list -C client/retry -m -json; go list -C headers -m -json; go list -C masker/auth -m -json; go list -C masker/json -m -json; go list -C masker/query -m -json; go list -C mime -m -json; go list -C response/wrapper -m -json; go list -C server/dumper -m -json; go list -C storage/debug -m -json) | jq -s '.' | jq -c '[.[].Dir]') >> $GITHUB_OUTPUT

  tidy:
    name: tidy
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          cache-dependency-path: 'go.sum'
          go-version: stable
      - name: Run tidy
        working-directory: ${{ matrix.modules }}
        run: go mod tidy --diff

  checks:
    name: checks
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
        go-version: [ oldstable, stable ]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          cache-dependency-path: 'go.sum'
          go-version: ${{ matrix.go-version }}
      - name: Run Download
        working-directory: ${{ matrix.modules }}
        run: go mod download
      - name: Run govulncheck
        working-directory: ${{ matrix.modules }}
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@v0.0.0-20250106192626-d1f380186385 # v1.1.4
          govulncheck -show verbose ./...

  spelling:
    name: Spell Check with Typos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Spell Check Repo
        uses: crate-ci/typos@b1a1ef3893ff35ade0cfa71523852a49bfd05d19 # v1.31.1

  golangci:
    name: lint
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: stable
          cache-dependency-path: 'go.sum'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@1481404843c368bc19ca9406f87d6e0fc97bdcfd # v7.0.0
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: ${{ env.GOLANGCI_LINT_VERSION }}

          # Optional: working directory, useful for monorepos
          # working-directory: headers
          working-directory: ${{ matrix.modules }}

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          args: --timeout=20m --output.sarif.path="${{ matrix.modules }}/results.sarif"

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@45775bd8235c68ba998cffa5171334d58593da47 # v3.28.15
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: "${{ matrix.modules }}/results.sarif"
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: golangci-lint

  tests:
    name: tests
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ stable, oldstable ]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          # Module go.uber.org/mock/gomock has go 1.23 dependency
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: '**/go.sum'

      - name: Test client/dumper package
        run: go test -C client/dumper -gcflags=-l ./... -race -coverprofile=./dumper.out -covermode=atomic

      - name: Test client/retry package
        run: go test -C client/retry -gcflags=-l ./... -race -coverprofile=./retry.out -covermode=atomic

      - name: Test headers package
        run: go test -C headers -gcflags=-l ./... -race -coverprofile=./headers.out -covermode=atomic

      - name: Test masker/auth package
        run: go test -C masker/auth -gcflags=-l ./... -race -coverprofile=./auth.out -covermode=atomic

      - name: Test masker/json package
        run: go test -C masker/json -gcflags=-l ./... -race -coverprofile=./json.out -covermode=atomic

      - name: Test masker/query package
        run: go test -C masker/query -gcflags=-l ./... -race -coverprofile=./query.out -covermode=atomic

      - name: Test response/wrapper package
        run: go test -C response/wrapper -gcflags=-l ./... -race -coverprofile=./wrapper.out -covermode=atomic

      - name: Test server/dumper package
        run: go test -C server/dumper -gcflags=-l ./... -race -coverprofile=./dumper.out -covermode=atomic

      - name: Test storage/debug package
        run: go test -C storage/debug -gcflags=-l ./... -race -coverprofile=./debug.out -covermode=atomic

      - name: Check client/dumper coverage
        uses: vladopajic/go-test-coverage@3306bd46e9f0ed238b9d4f7edbbf7b948728469d # v2.11.2
        with:
          profile: ./client/dumper/dumper.out
          local-prefix: github.com/nafigator/http
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check client/retry coverage
        uses: vladopajic/go-test-coverage@3306bd46e9f0ed238b9d4f7edbbf7b948728469d # v2.11.2
        with:
          profile: ./client/retry/retry.out
          local-prefix: github.com/nafigator/http
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check headers coverage
        uses: vladopajic/go-test-coverage@3306bd46e9f0ed238b9d4f7edbbf7b948728469d # v2.11.2
        with:
          profile: ./headers/headers.out
          local-prefix: github.com/nafigator/http
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check masker/auth coverage
        uses: vladopajic/go-test-coverage@3306bd46e9f0ed238b9d4f7edbbf7b948728469d # v2.11.2
        with:
          profile: ./masker/auth/auth.out
          local-prefix: github.com/nafigator/http
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check masker/json coverage
        uses: vladopajic/go-test-coverage@3306bd46e9f0ed238b9d4f7edbbf7b948728469d # v2.11.2
        with:
          profile: ./masker/json/json.out
          local-prefix: github.com/nafigator/http
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check masker/query coverage
        uses: vladopajic/go-test-coverage@3306bd46e9f0ed238b9d4f7edbbf7b948728469d # v2.11.2
        with:
          profile: ./masker/query/query.out
          local-prefix: github.com/nafigator/http
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check response/wrapper coverage
        uses: vladopajic/go-test-coverage@3306bd46e9f0ed238b9d4f7edbbf7b948728469d # v2.11.2
        with:
          profile: ./response/wrapper/wrapper.out
          local-prefix: github.com/nafigator/http
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check server/dumper coverage
        uses: vladopajic/go-test-coverage@3306bd46e9f0ed238b9d4f7edbbf7b948728469d # v2.11.2
        with:
          profile: ./server/dumper/dumper.out
          local-prefix: github.com/nafigator/http
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check storage/debug coverage
        uses: vladopajic/go-test-coverage@3306bd46e9f0ed238b9d4f7edbbf7b948728469d # v2.11.2
        with:
          profile: ./storage/debug/debug.out
          local-prefix: github.com/nafigator/http
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./client/dumper/dumper.out, ./client/retry/retry.out, ./headers/headers.out, ./masker/auth/auth.out, ./masker/json/json.out, ./masker/query/query.out, ./response/wrapper/wrapper.out, ./server/dumper/dumper.out, ./storage/debug/debug.out
          flags: unittests
          name: codecov-http
          verbose: false
